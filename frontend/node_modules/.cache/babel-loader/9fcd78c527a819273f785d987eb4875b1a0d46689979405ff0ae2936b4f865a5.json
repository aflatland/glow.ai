{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Annabel\\\\chat-app\\\\frontend\\\\src\\\\components\\\\Message.jsx\",\n  _s = $RefreshSig$();\nimport { useState, memo } from 'react';\nimport { translateText } from '../utils/translateText.js';\n\n// handles translate\n// memoization prevents renders of messages that haven't changed\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const Message = /*#__PURE__*/_s( /*#__PURE__*/memo(_c = _s(({\n  content,\n  name\n}) => {\n  _s();\n  // state controlling translation visibility\n  const [isTranslatedMessageVisible, setIsTranslatedMessageVisible] = useState(false);\n\n  // state for storing translated text\n  const [translatedMessage, setTranslatedMessage] = useState(\" . . .\");\n\n  // state for checking if text has been translated\n  const [messageIsTranslated, setMessageIsTranslated] = useState(false);\n\n  // handle message click event\n  const handleMessageClick = async () => {\n    // toggle visibility of translated message\n    setIsTranslatedMessageVisible(prev => !prev);\n\n    // each message is translated only once\n    if (!messageIsTranslated) {\n      try {\n        const translated = await translateText(content);\n        setTranslatedMessage(translated);\n        setMessageIsTranslated(true);\n      } catch (error) {\n        console.error('Translation failed:', error);\n      }\n    }\n  };\n\n  // render message component\n  return /*#__PURE__*/_jsxDEV(\"li\", {\n    className: \"hover:bg-[#f1f6f9] pb-4\",\n    onClick: handleMessageClick,\n    children: [/*#__PURE__*/_jsxDEV(\"span\", {\n      className: \"text-amber-500 block\",\n      children: [name, \" \"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 39,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n      style: {\n        color: 'black',\n        cursor: 'auto'\n      },\n      children: content\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 40,\n      columnNumber: 9\n    }, this), isTranslatedMessageVisible && /*#__PURE__*/_jsxDEV(\"p\", {\n      className: \" text-[#98a0a7]\",\n      children: ['|--', \" \", translatedMessage]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 11\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 38,\n    columnNumber: 7\n  }, this);\n}, \"xULoa2Ol5HoorhO7jUQA6G0+tG8=\")), \"xULoa2Ol5HoorhO7jUQA6G0+tG8=\");\n_c2 = Message;\nvar _c, _c2;\n$RefreshReg$(_c, \"Message$memo\");\n$RefreshReg$(_c2, \"Message\");","map":{"version":3,"names":["useState","memo","translateText","jsxDEV","_jsxDEV","Message","_s","_c","content","name","isTranslatedMessageVisible","setIsTranslatedMessageVisible","translatedMessage","setTranslatedMessage","messageIsTranslated","setMessageIsTranslated","handleMessageClick","prev","translated","error","console","className","onClick","children","fileName","_jsxFileName","lineNumber","columnNumber","style","color","cursor","_c2","$RefreshReg$"],"sources":["C:/Users/Annabel/chat-app/frontend/src/components/Message.jsx"],"sourcesContent":["import { useState, memo } from 'react';\r\nimport { translateText } from '../utils/translateText.js';\r\n\r\n// handles translate\r\n// memoization prevents renders of messages that haven't changed\r\nexport const Message = memo(({ content, name }) => {\r\n \r\n    // state controlling translation visibility\r\n    const [isTranslatedMessageVisible, setIsTranslatedMessageVisible] = useState(false);\r\n    \r\n    // state for storing translated text\r\n    const [translatedMessage, setTranslatedMessage] = useState(\" . . .\");\r\n    \r\n    // state for checking if text has been translated\r\n    const [messageIsTranslated, setMessageIsTranslated] = useState(false);\r\n  \r\n    // handle message click event\r\n    const handleMessageClick = async () => {\r\n  \r\n      // toggle visibility of translated message\r\n      setIsTranslatedMessageVisible(prev => !prev);\r\n  \r\n      // each message is translated only once\r\n      if(!messageIsTranslated) {\r\n        try {\r\n          const translated = await translateText(content);\r\n          setTranslatedMessage(translated);\r\n          setMessageIsTranslated(true);\r\n        } catch (error) {\r\n          console.error('Translation failed:', error);\r\n        }\r\n      }\r\n    };\r\n  \r\n  \r\n    // render message component\r\n    return(\r\n      <li className = \"hover:bg-[#f1f6f9] pb-4\" onClick={handleMessageClick}>\r\n        <span className = \"text-amber-500 block\">{name} </span>\r\n        <span style={{color:'black', cursor:'auto'}} >\r\n        {content}\r\n        </span>\r\n  \r\n        {isTranslatedMessageVisible && (\r\n          <p className = \" text-[#98a0a7]\">\r\n            {'|--'} {translatedMessage}\r\n          </p>\r\n        )}\r\n  \r\n      </li>\r\n    );\r\n  });"],"mappings":";;AAAA,SAASA,QAAQ,EAAEC,IAAI,QAAQ,OAAO;AACtC,SAASC,aAAa,QAAQ,2BAA2B;;AAEzD;AACA;AAAA,SAAAC,MAAA,IAAAC,OAAA;AACA,OAAO,MAAMC,OAAO,gBAAAC,EAAA,eAAGL,IAAI,CAAAM,EAAA,GAAAD,EAAA,CAAC,CAAC;EAAEE,OAAO;EAAEC;AAAK,CAAC,KAAK;EAAAH,EAAA;EAE/C;EACA,MAAM,CAACI,0BAA0B,EAAEC,6BAA6B,CAAC,GAAGX,QAAQ,CAAC,KAAK,CAAC;;EAEnF;EACA,MAAM,CAACY,iBAAiB,EAAEC,oBAAoB,CAAC,GAAGb,QAAQ,CAAC,QAAQ,CAAC;;EAEpE;EACA,MAAM,CAACc,mBAAmB,EAAEC,sBAAsB,CAAC,GAAGf,QAAQ,CAAC,KAAK,CAAC;;EAErE;EACA,MAAMgB,kBAAkB,GAAG,MAAAA,CAAA,KAAY;IAErC;IACAL,6BAA6B,CAACM,IAAI,IAAI,CAACA,IAAI,CAAC;;IAE5C;IACA,IAAG,CAACH,mBAAmB,EAAE;MACvB,IAAI;QACF,MAAMI,UAAU,GAAG,MAAMhB,aAAa,CAACM,OAAO,CAAC;QAC/CK,oBAAoB,CAACK,UAAU,CAAC;QAChCH,sBAAsB,CAAC,IAAI,CAAC;MAC9B,CAAC,CAAC,OAAOI,KAAK,EAAE;QACdC,OAAO,CAACD,KAAK,CAAC,qBAAqB,EAAEA,KAAK,CAAC;MAC7C;IACF;EACF,CAAC;;EAGD;EACA,oBACEf,OAAA;IAAIiB,SAAS,EAAG,yBAAyB;IAACC,OAAO,EAAEN,kBAAmB;IAAAO,QAAA,gBACpEnB,OAAA;MAAMiB,SAAS,EAAG,sBAAsB;MAAAE,QAAA,GAAEd,IAAI,EAAC,GAAC;IAAA;MAAAe,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAM,CAAC,eACvDvB,OAAA;MAAMwB,KAAK,EAAE;QAACC,KAAK,EAAC,OAAO;QAAEC,MAAM,EAAC;MAAM,CAAE;MAAAP,QAAA,EAC3Cf;IAAO;MAAAgB,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACF,CAAC,EAENjB,0BAA0B,iBACzBN,OAAA;MAAGiB,SAAS,EAAG,iBAAiB;MAAAE,QAAA,GAC7B,KAAK,EAAC,GAAC,EAACX,iBAAiB;IAAA;MAAAY,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACzB,CACJ;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAEC,CAAC;AAET,CAAC,kCAAC;AAACI,GAAA,GA9CQ1B,OAAO;AAAA,IAAAE,EAAA,EAAAwB,GAAA;AAAAC,YAAA,CAAAzB,EAAA;AAAAyB,YAAA,CAAAD,GAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}