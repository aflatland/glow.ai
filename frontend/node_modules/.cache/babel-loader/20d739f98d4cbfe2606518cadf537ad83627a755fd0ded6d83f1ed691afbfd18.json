{"ast":null,"code":"import API_BASE_URL from '../constants/apiBaseUrl';\n\n// provides the bot response given the complete chat history\nasync function getBotResponse(chat) {\n  try {\n    // passes entire chat as a JSON list to server, which provides a response\n    // using the OpenAI API\n    const server_response = await fetch(`${API_BASE_URL}/api/chatbot/`, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({\n        completeChat: chat\n      })\n    });\n\n    // extract bot's resopnse and return as JSON item for the chat list\n    const responseJson = await server_response.json();\n    return {\n      \"role\": \"assistant\",\n      \"content\": responseJson.reply\n    };\n  } catch (error) {\n    console.error(\"Error responding to message:\", error); // handle error\n  }\n}\nexport { getBotResponse };","map":{"version":3,"names":["API_BASE_URL","getBotResponse","chat","server_response","fetch","method","headers","body","JSON","stringify","completeChat","responseJson","json","reply","error","console"],"sources":["C:/Users/Annabel/chat-app/frontend/src/utils/getBotResponse.js"],"sourcesContent":["import API_BASE_URL from '../constants/apiBaseUrl'\r\n\r\n // provides the bot response given the complete chat history\r\n async function getBotResponse(chat) {\r\n    try {\r\n        // passes entire chat as a JSON list to server, which provides a response\r\n        // using the OpenAI API\r\n        const server_response = await fetch(`${API_BASE_URL}/api/chatbot/`, {\r\n            method: 'POST', \r\n            headers: { 'Content-Type': 'application/json' },\r\n            body: JSON.stringify({ completeChat: chat }), \r\n        });\r\n\r\n        // extract bot's resopnse and return as JSON item for the chat list\r\n        const responseJson = await server_response.json();\r\n        return { \"role\":\"assistant\", \"content\": responseJson.reply };\r\n\r\n    } catch (error) {\r\n        console.error(\"Error responding to message:\", error); // handle error\r\n    }\r\n  }\r\n\r\n  export {getBotResponse}"],"mappings":"AAAA,OAAOA,YAAY,MAAM,yBAAyB;;AAEjD;AACA,eAAeC,cAAcA,CAACC,IAAI,EAAE;EACjC,IAAI;IACA;IACA;IACA,MAAMC,eAAe,GAAG,MAAMC,KAAK,CAAE,GAAEJ,YAAa,eAAc,EAAE;MAChEK,MAAM,EAAE,MAAM;MACdC,OAAO,EAAE;QAAE,cAAc,EAAE;MAAmB,CAAC;MAC/CC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAAC;QAAEC,YAAY,EAAER;MAAK,CAAC;IAC/C,CAAC,CAAC;;IAEF;IACA,MAAMS,YAAY,GAAG,MAAMR,eAAe,CAACS,IAAI,CAAC,CAAC;IACjD,OAAO;MAAE,MAAM,EAAC,WAAW;MAAE,SAAS,EAAED,YAAY,CAACE;IAAM,CAAC;EAEhE,CAAC,CAAC,OAAOC,KAAK,EAAE;IACZC,OAAO,CAACD,KAAK,CAAC,8BAA8B,EAAEA,KAAK,CAAC,CAAC,CAAC;EAC1D;AACF;AAEA,SAAQb,cAAc"},"metadata":{},"sourceType":"module","externalDependencies":[]}