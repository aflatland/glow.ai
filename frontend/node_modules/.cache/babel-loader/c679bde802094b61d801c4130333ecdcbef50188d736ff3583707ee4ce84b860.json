{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Annabel\\\\chat-app\\\\frontend\\\\src\\\\components\\\\Chat.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { getBotResponse } from '../utils/getBotResponse.js';\nimport { languageData } from \"../constants/languageData.js\";\nimport { Messages } from \"../components/Messages.jsx\";\nimport { defaultLanguage } from \"../constants/userSettings.js\";\nimport { MessageBar } from \"../components/MessageBar.jsx\";\n\n// bot response \nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const Chat = () => {\n  _s();\n  // state for storing chat\n  const [chatList, setChatList] = useState([]);\n  const [specialCharacters, setSpecialCharacters] = useState(languageData[\"Norwegian\"].specialCharacters);\n\n  // function to initialize chat lsit accroding to language\n  const initializeChatList = lang => [{\n    \"role\": \"system\",\n    \"content\": \"You are a friendly \" + lang + \" speaker who speaks A1 \" + lang + \". Your goal is to help the user improve their \" + lang + \" and keep the conversation going. Repeat words already used in the chat as much as possible.\"\n  }, {\n    \"role\": \"assistant\",\n    \"content\": languageData[lang].prompt\n  }];\n  useEffect(() => {\n    const initialLanguage = localStorage.getItem('learnLanguage' || defaultLanguage);\n    setChatList(initializeChatList(initialLanguage));\n    setSpecialCharacters(languageData[initialLanguage].specialCharacters);\n\n    // listen for changes to local storage, indicating language has changed\n    const handleStorageChange = event => {\n      if (event.key === 'learnLanguage') {\n        const newLanguage = event.newValue || defaultLanguage;\n        setChatList(initializeChatList(newLanguage));\n        setSpecialCharacters(languageData[newLanguage].specialCharacters);\n      }\n    };\n\n    // when local storage changes, sets new learning language if changed\n    window.addEventListener('storage', handleStorageChange);\n\n    // clean up event listener\n    return () => {\n      window.removeEventListener('storage', handleStorageChange);\n    };\n  }, []);\n\n  // handles message responses when user sends message\n  const handleBotResponse = async message => {\n    // adds user's latest message to the list of chat messages\n    const updatedChatList = [...chatList, {\n      \"role\": \"user\",\n      \"content\": message\n    }];\n    setChatList(updatedChatList);\n\n    // updates chat with respones from bot\n    try {\n      console.log(\"Requesting chat response...\");\n      const response = await getBotResponse(updatedChatList);\n      setChatList([...updatedChatList, response]);\n    } catch (error) {\n      console.error('Response failed:', error); // handles errors\n    }\n  };\n\n  // render room components\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"flex flex-col h-full p-3 pr-0\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"flex-grow overflow-auto scrollbar-thin scrollbar-thumb-gray-200 scrollbar-thumb-rounded\",\n      children: /*#__PURE__*/_jsxDEV(Messages, {\n        messages: chatList\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 74,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 73,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"\",\n      children: /*#__PURE__*/_jsxDEV(MessageBar, {\n        onSendMessage: handleBotResponse,\n        characters: specialCharacters\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 78,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 77,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 72,\n    columnNumber: 7\n  }, this);\n};\n_s(Chat, \"xk7ID8HVzdzGTrqgYTNgKpAyIQk=\");\n_c = Chat;\nvar _c;\n$RefreshReg$(_c, \"Chat\");","map":{"version":3,"names":["React","useState","useEffect","getBotResponse","languageData","Messages","defaultLanguage","MessageBar","jsxDEV","_jsxDEV","Chat","_s","chatList","setChatList","specialCharacters","setSpecialCharacters","initializeChatList","lang","prompt","initialLanguage","localStorage","getItem","handleStorageChange","event","key","newLanguage","newValue","window","addEventListener","removeEventListener","handleBotResponse","message","updatedChatList","console","log","response","error","className","children","messages","fileName","_jsxFileName","lineNumber","columnNumber","onSendMessage","characters","_c","$RefreshReg$"],"sources":["C:/Users/Annabel/chat-app/frontend/src/components/Chat.jsx"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport { getBotResponse } from '../utils/getBotResponse.js';\r\nimport { languageData } from \"../constants/languageData.js\";\r\nimport { Messages } from \"../components/Messages.jsx\";\r\nimport { defaultLanguage } from \"../constants/userSettings.js\";\r\nimport { MessageBar } from \"../components/MessageBar.jsx\";\r\n\r\n// bot response \r\nexport const Chat = () => {\r\n\r\n    // state for storing chat\r\n    const [chatList, setChatList] = useState([]);\r\n    const [specialCharacters, setSpecialCharacters] = useState(languageData[\"Norwegian\"].specialCharacters);\r\n      \r\n    // function to initialize chat lsit accroding to language\r\n    const initializeChatList = (lang) => [\r\n      { \"role\":\"system\", \"content\": \"You are a friendly \" + lang + \" speaker who speaks A1 \" + lang +\". Your goal is to help the user improve their \" + lang +  \" and keep the conversation going. Repeat words already used in the chat as much as possible.\" },\r\n      { \"role\": \"assistant\", \"content\": languageData[lang].prompt },\r\n    ];\r\n  \r\n  \r\n    useEffect(() => {\r\n  \r\n      const initialLanguage = localStorage.getItem('learnLanguage' || defaultLanguage);\r\n      setChatList(initializeChatList(initialLanguage));\r\n      setSpecialCharacters(languageData[initialLanguage].specialCharacters);\r\n  \r\n      // listen for changes to local storage, indicating language has changed\r\n      const handleStorageChange = (event) => {\r\n        if (event.key === 'learnLanguage') {\r\n          const newLanguage = event.newValue || defaultLanguage;\r\n          setChatList(initializeChatList(newLanguage));\r\n          setSpecialCharacters(languageData[newLanguage].specialCharacters);\r\n        } \r\n      };\r\n  \r\n      // when local storage changes, sets new learning language if changed\r\n      window.addEventListener('storage', handleStorageChange);\r\n  \r\n      // clean up event listener\r\n      return () => {\r\n        window.removeEventListener('storage', handleStorageChange);\r\n      };\r\n  \r\n    }, []);\r\n  \r\n  \r\n  \r\n  \r\n    // handles message responses when user sends message\r\n    const handleBotResponse = async (message) => {\r\n  \r\n      // adds user's latest message to the list of chat messages\r\n      const updatedChatList = [...chatList, { \"role\": \"user\", \"content\": message }];\r\n      setChatList(updatedChatList);\r\n  \r\n      // updates chat with respones from bot\r\n      try {\r\n        console.log(\"Requesting chat response...\")\r\n        const response = await getBotResponse(updatedChatList);\r\n        setChatList([...updatedChatList, response]);\r\n        \r\n      } catch (error) {\r\n        console.error('Response failed:', error); // handles errors\r\n      }\r\n  \r\n    };\r\n  \r\n  \r\n    // render room components\r\n    return (\r\n      <div className = \"flex flex-col h-full p-3 pr-0\">\r\n        <div className = \"flex-grow overflow-auto scrollbar-thin scrollbar-thumb-gray-200 scrollbar-thumb-rounded\">\r\n          <Messages messages = { chatList } />\r\n        </div>\r\n  \r\n        <div className = \"\">\r\n          <MessageBar onSendMessage = { handleBotResponse } characters = {specialCharacters} />\r\n        </div>\r\n        \r\n      </div>\r\n    );\r\n  }\r\n  "],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}