{"ast":null,"code":"// google cloud server\nconst API_BASE_URL = \"https://backend-ao4yls34ba-uc.a.run.app\"; //\"http://127.0.0.1:8000\"; // https://backend-ao4yls34ba-uc.a.run.app\n\n// translates text from norwegian to english \nasync function translateText(text) {\n  try {\n    // passes text to server with translator\n    const botTranslation = await fetch(`${API_BASE_URL}/api/chatbot/translator`, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({\n        textToTranslate: text\n      })\n    });\n\n    // extract translated text\n    const translationJson = await botTranslation.json();\n    return translationJson.translation;\n  } catch (error) {\n    console.error(\"Error translating text:\", error); // handle error\n  }\n}\n\n// provides the bot response given the complete chat history\nasync function botResponse(chat) {\n  try {\n    // passes entire chat as a JSON list to server, which provides a response\n    // using the OpenAI API\n    const server_response = await fetch(`${API_BASE_URL}/api/chatbot/`, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({\n        completeChat: chat\n      })\n    });\n\n    // extract bot's resopnse and return as JSON item for the chat list\n    const responseJson = await server_response.json();\n    return {\n      \"role\": \"assistant\",\n      \"content\": responseJson.reply\n    };\n  } catch (error) {\n    console.error(\"Error responding to message:\", error); // handle error\n  }\n}\nexport { translateText, botResponse };","map":{"version":3,"names":["API_BASE_URL","translateText","text","botTranslation","fetch","method","headers","body","JSON","stringify","textToTranslate","translationJson","json","translation","error","console","botResponse","chat","server_response","completeChat","responseJson","reply"],"sources":["C:/Users/Annabel/chat-app/frontend/src/pages/apiService.js"],"sourcesContent":["// google cloud server\r\nconst API_BASE_URL = \"https://backend-ao4yls34ba-uc.a.run.app\";//\"http://127.0.0.1:8000\"; // https://backend-ao4yls34ba-uc.a.run.app\r\n\r\n// translates text from norwegian to english \r\nasync function translateText(text) {\r\n    try {\r\n      // passes text to server with translator\r\n      const botTranslation = await fetch(`${API_BASE_URL}/api/chatbot/translator`, {\r\n        method: 'POST',\r\n        headers: { 'Content-Type': 'application/json' },\r\n        body: JSON.stringify({ textToTranslate: text }),\r\n      });\r\n\r\n      // extract translated text\r\n      const translationJson = await botTranslation.json();\r\n      return translationJson.translation;\r\n\r\n    } catch (error) {\r\n      console.error(\"Error translating text:\", error); // handle error\r\n    }\r\n  }\r\n\r\n\r\n  // provides the bot response given the complete chat history\r\n async function botResponse(chat) {\r\n    try {\r\n        // passes entire chat as a JSON list to server, which provides a response\r\n        // using the OpenAI API\r\n        const server_response = await fetch(`${API_BASE_URL}/api/chatbot/`, {\r\n            method: 'POST', \r\n            headers: { 'Content-Type': 'application/json' },\r\n            body: JSON.stringify({ completeChat: chat }), \r\n        });\r\n\r\n        // extract bot's resopnse and return as JSON item for the chat list\r\n        const responseJson = await server_response.json();\r\n        return { \"role\":\"assistant\", \"content\": responseJson.reply };\r\n\r\n    } catch (error) {\r\n        console.error(\"Error responding to message:\", error); // handle error\r\n    }\r\n  }\r\n\r\n  export { translateText, botResponse };"],"mappings":"AAAA;AACA,MAAMA,YAAY,GAAG,yCAAyC,CAAC;;AAE/D;AACA,eAAeC,aAAaA,CAACC,IAAI,EAAE;EAC/B,IAAI;IACF;IACA,MAAMC,cAAc,GAAG,MAAMC,KAAK,CAAE,GAAEJ,YAAa,yBAAwB,EAAE;MAC3EK,MAAM,EAAE,MAAM;MACdC,OAAO,EAAE;QAAE,cAAc,EAAE;MAAmB,CAAC;MAC/CC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAAC;QAAEC,eAAe,EAAER;MAAK,CAAC;IAChD,CAAC,CAAC;;IAEF;IACA,MAAMS,eAAe,GAAG,MAAMR,cAAc,CAACS,IAAI,CAAC,CAAC;IACnD,OAAOD,eAAe,CAACE,WAAW;EAEpC,CAAC,CAAC,OAAOC,KAAK,EAAE;IACdC,OAAO,CAACD,KAAK,CAAC,yBAAyB,EAAEA,KAAK,CAAC,CAAC,CAAC;EACnD;AACF;;AAGA;AACD,eAAeE,WAAWA,CAACC,IAAI,EAAE;EAC9B,IAAI;IACA;IACA;IACA,MAAMC,eAAe,GAAG,MAAMd,KAAK,CAAE,GAAEJ,YAAa,eAAc,EAAE;MAChEK,MAAM,EAAE,MAAM;MACdC,OAAO,EAAE;QAAE,cAAc,EAAE;MAAmB,CAAC;MAC/CC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAAC;QAAEU,YAAY,EAAEF;MAAK,CAAC;IAC/C,CAAC,CAAC;;IAEF;IACA,MAAMG,YAAY,GAAG,MAAMF,eAAe,CAACN,IAAI,CAAC,CAAC;IACjD,OAAO;MAAE,MAAM,EAAC,WAAW;MAAE,SAAS,EAAEQ,YAAY,CAACC;IAAM,CAAC;EAEhE,CAAC,CAAC,OAAOP,KAAK,EAAE;IACZC,OAAO,CAACD,KAAK,CAAC,8BAA8B,EAAEA,KAAK,CAAC,CAAC,CAAC;EAC1D;AACF;AAEA,SAASb,aAAa,EAAEe,WAAW"},"metadata":{},"sourceType":"module","externalDependencies":[]}