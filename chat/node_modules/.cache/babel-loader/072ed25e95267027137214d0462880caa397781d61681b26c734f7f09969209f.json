{"ast":null,"code":"// File generated from our OpenAPI spec by Stainless.\nimport { APIResource } from 'openai/resource';\nimport { isRequestOptions } from 'openai/core';\nimport * as RunsAPI from 'openai/resources/beta/threads/runs/runs';\nimport * as StepsAPI from 'openai/resources/beta/threads/runs/steps';\nimport { CursorPage } from 'openai/pagination';\nexport class Runs extends APIResource {\n  constructor() {\n    super(...arguments);\n    this.steps = new StepsAPI.Steps(this._client);\n  }\n  /**\n   * Create a run.\n   */\n  create(threadId, body, options) {\n    return this._client.post(\"/threads/\".concat(threadId, \"/runs\"), {\n      body,\n      ...options,\n      headers: {\n        'OpenAI-Beta': 'assistants=v1',\n        ...(options === null || options === void 0 ? void 0 : options.headers)\n      }\n    });\n  }\n  /**\n   * Retrieves a run.\n   */\n  retrieve(threadId, runId, options) {\n    return this._client.get(\"/threads/\".concat(threadId, \"/runs/\").concat(runId), {\n      ...options,\n      headers: {\n        'OpenAI-Beta': 'assistants=v1',\n        ...(options === null || options === void 0 ? void 0 : options.headers)\n      }\n    });\n  }\n  /**\n   * Modifies a run.\n   */\n  update(threadId, runId, body, options) {\n    return this._client.post(\"/threads/\".concat(threadId, \"/runs/\").concat(runId), {\n      body,\n      ...options,\n      headers: {\n        'OpenAI-Beta': 'assistants=v1',\n        ...(options === null || options === void 0 ? void 0 : options.headers)\n      }\n    });\n  }\n  list(threadId) {\n    let query = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    let options = arguments.length > 2 ? arguments[2] : undefined;\n    if (isRequestOptions(query)) {\n      return this.list(threadId, {}, query);\n    }\n    return this._client.getAPIList(\"/threads/\".concat(threadId, \"/runs\"), RunsPage, {\n      query,\n      ...options,\n      headers: {\n        'OpenAI-Beta': 'assistants=v1',\n        ...(options === null || options === void 0 ? void 0 : options.headers)\n      }\n    });\n  }\n  /**\n   * Cancels a run that is `in_progress`.\n   */\n  cancel(threadId, runId, options) {\n    return this._client.post(\"/threads/\".concat(threadId, \"/runs/\").concat(runId, \"/cancel\"), {\n      ...options,\n      headers: {\n        'OpenAI-Beta': 'assistants=v1',\n        ...(options === null || options === void 0 ? void 0 : options.headers)\n      }\n    });\n  }\n  /**\n   * When a run has the `status: \"requires_action\"` and `required_action.type` is\n   * `submit_tool_outputs`, this endpoint can be used to submit the outputs from the\n   * tool calls once they're all completed. All outputs must be submitted in a single\n   * request.\n   */\n  submitToolOutputs(threadId, runId, body, options) {\n    return this._client.post(\"/threads/\".concat(threadId, \"/runs/\").concat(runId, \"/submit_tool_outputs\"), {\n      body,\n      ...options,\n      headers: {\n        'OpenAI-Beta': 'assistants=v1',\n        ...(options === null || options === void 0 ? void 0 : options.headers)\n      }\n    });\n  }\n}\nexport class RunsPage extends CursorPage {}\n(function (Runs) {\n  Runs.RunsPage = RunsAPI.RunsPage;\n  Runs.Steps = StepsAPI.Steps;\n  Runs.RunStepsPage = StepsAPI.RunStepsPage;\n})(Runs || (Runs = {}));","map":{"version":3,"names":["APIResource","isRequestOptions","RunsAPI","StepsAPI","CursorPage","Runs","constructor","steps","Steps","_client","create","threadId","body","options","post","concat","headers","retrieve","runId","get","update","list","query","arguments","length","undefined","getAPIList","RunsPage","cancel","submitToolOutputs","RunStepsPage"],"sources":["C:\\Users\\Annabel\\chat-app\\node_modules\\openai\\src\\resources\\beta\\threads\\runs\\runs.ts"],"sourcesContent":["// File generated from our OpenAPI spec by Stainless.\n\nimport * as Core from \"../../../../core\";\nimport { APIResource } from \"../../../../resource\";\nimport { isRequestOptions } from \"../../../../core\";\nimport * as RunsAPI from \"./runs\";\nimport * as Shared from \"../../../shared\";\nimport * as StepsAPI from \"./steps\";\nimport { CursorPage, type CursorPageParams } from \"../../../../pagination\";\n\nexport class Runs extends APIResource {\n  steps: StepsAPI.Steps = new StepsAPI.Steps(this._client);\n\n  /**\n   * Create a run.\n   */\n  create(threadId: string, body: RunCreateParams, options?: Core.RequestOptions): Core.APIPromise<Run> {\n    return this._client.post(`/threads/${threadId}/runs`, {\n      body,\n      ...options,\n      headers: { 'OpenAI-Beta': 'assistants=v1', ...options?.headers },\n    });\n  }\n\n  /**\n   * Retrieves a run.\n   */\n  retrieve(threadId: string, runId: string, options?: Core.RequestOptions): Core.APIPromise<Run> {\n    return this._client.get(`/threads/${threadId}/runs/${runId}`, {\n      ...options,\n      headers: { 'OpenAI-Beta': 'assistants=v1', ...options?.headers },\n    });\n  }\n\n  /**\n   * Modifies a run.\n   */\n  update(\n    threadId: string,\n    runId: string,\n    body: RunUpdateParams,\n    options?: Core.RequestOptions,\n  ): Core.APIPromise<Run> {\n    return this._client.post(`/threads/${threadId}/runs/${runId}`, {\n      body,\n      ...options,\n      headers: { 'OpenAI-Beta': 'assistants=v1', ...options?.headers },\n    });\n  }\n\n  /**\n   * Returns a list of runs belonging to a thread.\n   */\n  list(\n    threadId: string,\n    query?: RunListParams,\n    options?: Core.RequestOptions,\n  ): Core.PagePromise<RunsPage, Run>;\n  list(threadId: string, options?: Core.RequestOptions): Core.PagePromise<RunsPage, Run>;\n  list(\n    threadId: string,\n    query: RunListParams | Core.RequestOptions = {},\n    options?: Core.RequestOptions,\n  ): Core.PagePromise<RunsPage, Run> {\n    if (isRequestOptions(query)) {\n      return this.list(threadId, {}, query);\n    }\n    return this._client.getAPIList(`/threads/${threadId}/runs`, RunsPage, {\n      query,\n      ...options,\n      headers: { 'OpenAI-Beta': 'assistants=v1', ...options?.headers },\n    });\n  }\n\n  /**\n   * Cancels a run that is `in_progress`.\n   */\n  cancel(threadId: string, runId: string, options?: Core.RequestOptions): Core.APIPromise<Run> {\n    return this._client.post(`/threads/${threadId}/runs/${runId}/cancel`, {\n      ...options,\n      headers: { 'OpenAI-Beta': 'assistants=v1', ...options?.headers },\n    });\n  }\n\n  /**\n   * When a run has the `status: \"requires_action\"` and `required_action.type` is\n   * `submit_tool_outputs`, this endpoint can be used to submit the outputs from the\n   * tool calls once they're all completed. All outputs must be submitted in a single\n   * request.\n   */\n  submitToolOutputs(\n    threadId: string,\n    runId: string,\n    body: RunSubmitToolOutputsParams,\n    options?: Core.RequestOptions,\n  ): Core.APIPromise<Run> {\n    return this._client.post(`/threads/${threadId}/runs/${runId}/submit_tool_outputs`, {\n      body,\n      ...options,\n      headers: { 'OpenAI-Beta': 'assistants=v1', ...options?.headers },\n    });\n  }\n}\n\nexport class RunsPage extends CursorPage<Run> {}\n\n/**\n * Tool call objects\n */\nexport interface RequiredActionFunctionToolCall {\n  /**\n   * The ID of the tool call. This ID must be referenced when you submit the tool\n   * outputs in using the\n   * [Submit tool outputs to run](https://platform.openai.com/docs/api-reference/runs/submitToolOutputs)\n   * endpoint.\n   */\n  id: string;\n\n  /**\n   * The function definition.\n   */\n  function: RequiredActionFunctionToolCall.Function;\n\n  /**\n   * The type of tool call the output is required for. For now, this is always\n   * `function`.\n   */\n  type: 'function';\n}\n\nexport namespace RequiredActionFunctionToolCall {\n  /**\n   * The function definition.\n   */\n  export interface Function {\n    /**\n     * The arguments that the model expects you to pass to the function.\n     */\n    arguments: string;\n\n    /**\n     * The name of the function.\n     */\n    name: string;\n  }\n}\n\n/**\n * Represents an execution run on a\n * [thread](https://platform.openai.com/docs/api-reference/threads).\n */\nexport interface Run {\n  /**\n   * The identifier, which can be referenced in API endpoints.\n   */\n  id: string;\n\n  /**\n   * The ID of the\n   * [assistant](https://platform.openai.com/docs/api-reference/assistants) used for\n   * execution of this run.\n   */\n  assistant_id: string;\n\n  /**\n   * The Unix timestamp (in seconds) for when the run was cancelled.\n   */\n  cancelled_at: number | null;\n\n  /**\n   * The Unix timestamp (in seconds) for when the run was completed.\n   */\n  completed_at: number | null;\n\n  /**\n   * The Unix timestamp (in seconds) for when the run was created.\n   */\n  created_at: number;\n\n  /**\n   * The Unix timestamp (in seconds) for when the run will expire.\n   */\n  expires_at: number;\n\n  /**\n   * The Unix timestamp (in seconds) for when the run failed.\n   */\n  failed_at: number | null;\n\n  /**\n   * The list of [File](https://platform.openai.com/docs/api-reference/files) IDs the\n   * [assistant](https://platform.openai.com/docs/api-reference/assistants) used for\n   * this run.\n   */\n  file_ids: Array<string>;\n\n  /**\n   * The instructions that the\n   * [assistant](https://platform.openai.com/docs/api-reference/assistants) used for\n   * this run.\n   */\n  instructions: string;\n\n  /**\n   * The last error associated with this run. Will be `null` if there are no errors.\n   */\n  last_error: Run.LastError | null;\n\n  /**\n   * Set of 16 key-value pairs that can be attached to an object. This can be useful\n   * for storing additional information about the object in a structured format. Keys\n   * can be a maximum of 64 characters long and values can be a maxium of 512\n   * characters long.\n   */\n  metadata: unknown | null;\n\n  /**\n   * The model that the\n   * [assistant](https://platform.openai.com/docs/api-reference/assistants) used for\n   * this run.\n   */\n  model: string;\n\n  /**\n   * The object type, which is always `thread.run`.\n   */\n  object: 'thread.run';\n\n  /**\n   * Details on the action required to continue the run. Will be `null` if no action\n   * is required.\n   */\n  required_action: Run.RequiredAction | null;\n\n  /**\n   * The Unix timestamp (in seconds) for when the run was started.\n   */\n  started_at: number | null;\n\n  /**\n   * The status of the run, which can be either `queued`, `in_progress`,\n   * `requires_action`, `cancelling`, `cancelled`, `failed`, `completed`, or\n   * `expired`.\n   */\n  status:\n    | 'queued'\n    | 'in_progress'\n    | 'requires_action'\n    | 'cancelling'\n    | 'cancelled'\n    | 'failed'\n    | 'completed'\n    | 'expired';\n\n  /**\n   * The ID of the [thread](https://platform.openai.com/docs/api-reference/threads)\n   * that was executed on as a part of this run.\n   */\n  thread_id: string;\n\n  /**\n   * The list of tools that the\n   * [assistant](https://platform.openai.com/docs/api-reference/assistants) used for\n   * this run.\n   */\n  tools: Array<Run.AssistantToolsCode | Run.AssistantToolsRetrieval | Run.AssistantToolsFunction>;\n}\n\nexport namespace Run {\n  /**\n   * The last error associated with this run. Will be `null` if there are no errors.\n   */\n  export interface LastError {\n    /**\n     * One of `server_error` or `rate_limit_exceeded`.\n     */\n    code: 'server_error' | 'rate_limit_exceeded';\n\n    /**\n     * A human-readable description of the error.\n     */\n    message: string;\n  }\n\n  /**\n   * Details on the action required to continue the run. Will be `null` if no action\n   * is required.\n   */\n  export interface RequiredAction {\n    /**\n     * Details on the tool outputs needed for this run to continue.\n     */\n    submit_tool_outputs: RequiredAction.SubmitToolOutputs;\n\n    /**\n     * For now, this is always `submit_tool_outputs`.\n     */\n    type: 'submit_tool_outputs';\n  }\n\n  export namespace RequiredAction {\n    /**\n     * Details on the tool outputs needed for this run to continue.\n     */\n    export interface SubmitToolOutputs {\n      /**\n       * A list of the relevant tool calls.\n       */\n      tool_calls: Array<RunsAPI.RequiredActionFunctionToolCall>;\n    }\n  }\n\n  export interface AssistantToolsCode {\n    /**\n     * The type of tool being defined: `code_interpreter`\n     */\n    type: 'code_interpreter';\n  }\n\n  export interface AssistantToolsRetrieval {\n    /**\n     * The type of tool being defined: `retrieval`\n     */\n    type: 'retrieval';\n  }\n\n  export interface AssistantToolsFunction {\n    function: Shared.FunctionDefinition;\n\n    /**\n     * The type of tool being defined: `function`\n     */\n    type: 'function';\n  }\n}\n\nexport interface RunCreateParams {\n  /**\n   * The ID of the\n   * [assistant](https://platform.openai.com/docs/api-reference/assistants) to use to\n   * execute this run.\n   */\n  assistant_id: string;\n\n  /**\n   * Override the default system message of the assistant. This is useful for\n   * modifying the behavior on a per-run basis.\n   */\n  instructions?: string | null;\n\n  /**\n   * Set of 16 key-value pairs that can be attached to an object. This can be useful\n   * for storing additional information about the object in a structured format. Keys\n   * can be a maximum of 64 characters long and values can be a maxium of 512\n   * characters long.\n   */\n  metadata?: unknown | null;\n\n  /**\n   * The ID of the [Model](https://platform.openai.com/docs/api-reference/models) to\n   * be used to execute this run. If a value is provided here, it will override the\n   * model associated with the assistant. If not, the model associated with the\n   * assistant will be used.\n   */\n  model?: string | null;\n\n  /**\n   * Override the tools the assistant can use for this run. This is useful for\n   * modifying the behavior on a per-run basis.\n   */\n  tools?: Array<\n    | RunCreateParams.AssistantToolsCode\n    | RunCreateParams.AssistantToolsRetrieval\n    | RunCreateParams.AssistantToolsFunction\n  > | null;\n}\n\nexport namespace RunCreateParams {\n  export interface AssistantToolsCode {\n    /**\n     * The type of tool being defined: `code_interpreter`\n     */\n    type: 'code_interpreter';\n  }\n\n  export interface AssistantToolsRetrieval {\n    /**\n     * The type of tool being defined: `retrieval`\n     */\n    type: 'retrieval';\n  }\n\n  export interface AssistantToolsFunction {\n    function: Shared.FunctionDefinition;\n\n    /**\n     * The type of tool being defined: `function`\n     */\n    type: 'function';\n  }\n}\n\nexport interface RunUpdateParams {\n  /**\n   * Set of 16 key-value pairs that can be attached to an object. This can be useful\n   * for storing additional information about the object in a structured format. Keys\n   * can be a maximum of 64 characters long and values can be a maxium of 512\n   * characters long.\n   */\n  metadata?: unknown | null;\n}\n\nexport interface RunListParams extends CursorPageParams {\n  /**\n   * A cursor for use in pagination. `before` is an object ID that defines your place\n   * in the list. For instance, if you make a list request and receive 100 objects,\n   * ending with obj_foo, your subsequent call can include before=obj_foo in order to\n   * fetch the previous page of the list.\n   */\n  before?: string;\n\n  /**\n   * Sort order by the `created_at` timestamp of the objects. `asc` for ascending\n   * order and `desc` for descending order.\n   */\n  order?: 'asc' | 'desc';\n}\n\nexport interface RunSubmitToolOutputsParams {\n  /**\n   * A list of tools for which the outputs are being submitted.\n   */\n  tool_outputs: Array<RunSubmitToolOutputsParams.ToolOutput>;\n}\n\nexport namespace RunSubmitToolOutputsParams {\n  export interface ToolOutput {\n    /**\n     * The output of the tool call to be submitted to continue the run.\n     */\n    output?: string;\n\n    /**\n     * The ID of the tool call in the `required_action` object within the run object\n     * the output is being submitted for.\n     */\n    tool_call_id?: string;\n  }\n}\n\nexport namespace Runs {\n  export import RequiredActionFunctionToolCall = RunsAPI.RequiredActionFunctionToolCall;\n  export import Run = RunsAPI.Run;\n  export import RunsPage = RunsAPI.RunsPage;\n  export import RunCreateParams = RunsAPI.RunCreateParams;\n  export import RunUpdateParams = RunsAPI.RunUpdateParams;\n  export import RunListParams = RunsAPI.RunListParams;\n  export import RunSubmitToolOutputsParams = RunsAPI.RunSubmitToolOutputsParams;\n  export import Steps = StepsAPI.Steps;\n  export import CodeToolCall = StepsAPI.CodeToolCall;\n  export import FunctionToolCall = StepsAPI.FunctionToolCall;\n  export import MessageCreationStepDetails = StepsAPI.MessageCreationStepDetails;\n  export import RetrievalToolCall = StepsAPI.RetrievalToolCall;\n  export import RunStep = StepsAPI.RunStep;\n  export import ToolCallsStepDetails = StepsAPI.ToolCallsStepDetails;\n  export import RunStepsPage = StepsAPI.RunStepsPage;\n  export import StepListParams = StepsAPI.StepListParams;\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}