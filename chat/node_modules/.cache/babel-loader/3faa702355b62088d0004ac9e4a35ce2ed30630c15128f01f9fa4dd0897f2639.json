{"ast":null,"code":"// File generated from our OpenAPI spec by Stainless.\nimport { APIResource } from 'openai/resource';\nimport { isRequestOptions } from 'openai/core';\nimport * as MessagesAPI from 'openai/resources/beta/threads/messages/messages';\nimport * as RunsAPI from 'openai/resources/beta/threads/runs/runs';\nexport class Threads extends APIResource {\n  constructor() {\n    super(...arguments);\n    this.runs = new RunsAPI.Runs(this._client);\n    this.messages = new MessagesAPI.Messages(this._client);\n  }\n  create() {\n    let body = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    let options = arguments.length > 1 ? arguments[1] : undefined;\n    if (isRequestOptions(body)) {\n      return this.create({}, body);\n    }\n    return this._client.post('/threads', {\n      body,\n      ...options,\n      headers: {\n        'OpenAI-Beta': 'assistants=v1',\n        ...(options === null || options === void 0 ? void 0 : options.headers)\n      }\n    });\n  }\n  /**\n   * Retrieves a thread.\n   */\n  retrieve(threadId, options) {\n    return this._client.get(\"/threads/\".concat(threadId), {\n      ...options,\n      headers: {\n        'OpenAI-Beta': 'assistants=v1',\n        ...(options === null || options === void 0 ? void 0 : options.headers)\n      }\n    });\n  }\n  /**\n   * Modifies a thread.\n   */\n  update(threadId, body, options) {\n    return this._client.post(\"/threads/\".concat(threadId), {\n      body,\n      ...options,\n      headers: {\n        'OpenAI-Beta': 'assistants=v1',\n        ...(options === null || options === void 0 ? void 0 : options.headers)\n      }\n    });\n  }\n  /**\n   * Delete a thread.\n   */\n  del(threadId, options) {\n    return this._client.delete(\"/threads/\".concat(threadId), {\n      ...options,\n      headers: {\n        'OpenAI-Beta': 'assistants=v1',\n        ...(options === null || options === void 0 ? void 0 : options.headers)\n      }\n    });\n  }\n  /**\n   * Create a thread and run it in one request.\n   */\n  createAndRun(body, options) {\n    return this._client.post('/threads/runs', {\n      body,\n      ...options,\n      headers: {\n        'OpenAI-Beta': 'assistants=v1',\n        ...(options === null || options === void 0 ? void 0 : options.headers)\n      }\n    });\n  }\n}\n(function (Threads) {\n  Threads.Runs = RunsAPI.Runs;\n  Threads.RunsPage = RunsAPI.RunsPage;\n  Threads.Messages = MessagesAPI.Messages;\n  Threads.ThreadMessagesPage = MessagesAPI.ThreadMessagesPage;\n})(Threads || (Threads = {}));","map":{"version":3,"names":["APIResource","isRequestOptions","MessagesAPI","RunsAPI","Threads","constructor","runs","Runs","_client","messages","Messages","create","body","arguments","length","undefined","options","post","headers","retrieve","threadId","get","concat","update","del","delete","createAndRun","RunsPage","ThreadMessagesPage"],"sources":["C:\\Users\\Annabel\\chat-app\\node_modules\\openai\\src\\resources\\beta\\threads\\threads.ts"],"sourcesContent":["// File generated from our OpenAPI spec by Stainless.\n\nimport * as Core from \"../../../core\";\nimport { APIResource } from \"../../../resource\";\nimport { isRequestOptions } from \"../../../core\";\nimport * as ThreadsAPI from \"./threads\";\nimport * as Shared from \"../../shared\";\nimport * as MessagesAPI from \"./messages/messages\";\nimport * as RunsAPI from \"./runs/runs\";\n\nexport class Threads extends APIResource {\n  runs: RunsAPI.Runs = new RunsAPI.Runs(this._client);\n  messages: MessagesAPI.Messages = new MessagesAPI.Messages(this._client);\n\n  /**\n   * Create a thread.\n   */\n  create(body?: ThreadCreateParams, options?: Core.RequestOptions): Core.APIPromise<Thread>;\n  create(options?: Core.RequestOptions): Core.APIPromise<Thread>;\n  create(\n    body: ThreadCreateParams | Core.RequestOptions = {},\n    options?: Core.RequestOptions,\n  ): Core.APIPromise<Thread> {\n    if (isRequestOptions(body)) {\n      return this.create({}, body);\n    }\n    return this._client.post('/threads', {\n      body,\n      ...options,\n      headers: { 'OpenAI-Beta': 'assistants=v1', ...options?.headers },\n    });\n  }\n\n  /**\n   * Retrieves a thread.\n   */\n  retrieve(threadId: string, options?: Core.RequestOptions): Core.APIPromise<Thread> {\n    return this._client.get(`/threads/${threadId}`, {\n      ...options,\n      headers: { 'OpenAI-Beta': 'assistants=v1', ...options?.headers },\n    });\n  }\n\n  /**\n   * Modifies a thread.\n   */\n  update(threadId: string, body: ThreadUpdateParams, options?: Core.RequestOptions): Core.APIPromise<Thread> {\n    return this._client.post(`/threads/${threadId}`, {\n      body,\n      ...options,\n      headers: { 'OpenAI-Beta': 'assistants=v1', ...options?.headers },\n    });\n  }\n\n  /**\n   * Delete a thread.\n   */\n  del(threadId: string, options?: Core.RequestOptions): Core.APIPromise<ThreadDeleted> {\n    return this._client.delete(`/threads/${threadId}`, {\n      ...options,\n      headers: { 'OpenAI-Beta': 'assistants=v1', ...options?.headers },\n    });\n  }\n\n  /**\n   * Create a thread and run it in one request.\n   */\n  createAndRun(body: ThreadCreateAndRunParams, options?: Core.RequestOptions): Core.APIPromise<RunsAPI.Run> {\n    return this._client.post('/threads/runs', {\n      body,\n      ...options,\n      headers: { 'OpenAI-Beta': 'assistants=v1', ...options?.headers },\n    });\n  }\n}\n\n/**\n * Represents a thread that contains\n * [messages](https://platform.openai.com/docs/api-reference/messages).\n */\nexport interface Thread {\n  /**\n   * The identifier, which can be referenced in API endpoints.\n   */\n  id: string;\n\n  /**\n   * The Unix timestamp (in seconds) for when the thread was created.\n   */\n  created_at: number;\n\n  /**\n   * Set of 16 key-value pairs that can be attached to an object. This can be useful\n   * for storing additional information about the object in a structured format. Keys\n   * can be a maximum of 64 characters long and values can be a maxium of 512\n   * characters long.\n   */\n  metadata: unknown | null;\n\n  /**\n   * The object type, which is always `thread`.\n   */\n  object: 'thread';\n}\n\nexport interface ThreadDeleted {\n  id: string;\n\n  deleted: boolean;\n\n  object: 'thread.deleted';\n}\n\nexport interface ThreadCreateParams {\n  /**\n   * A list of [messages](https://platform.openai.com/docs/api-reference/messages) to\n   * start the thread with.\n   */\n  messages?: Array<ThreadCreateParams.Message>;\n\n  /**\n   * Set of 16 key-value pairs that can be attached to an object. This can be useful\n   * for storing additional information about the object in a structured format. Keys\n   * can be a maximum of 64 characters long and values can be a maxium of 512\n   * characters long.\n   */\n  metadata?: unknown | null;\n}\n\nexport namespace ThreadCreateParams {\n  export interface Message {\n    /**\n     * The content of the message.\n     */\n    content: string;\n\n    /**\n     * The role of the entity that is creating the message. Currently only `user` is\n     * supported.\n     */\n    role: 'user';\n\n    /**\n     * A list of [File](https://platform.openai.com/docs/api-reference/files) IDs that\n     * the message should use. There can be a maximum of 10 files attached to a\n     * message. Useful for tools like `retrieval` and `code_interpreter` that can\n     * access and use files.\n     */\n    file_ids?: Array<string>;\n\n    /**\n     * Set of 16 key-value pairs that can be attached to an object. This can be useful\n     * for storing additional information about the object in a structured format. Keys\n     * can be a maximum of 64 characters long and values can be a maxium of 512\n     * characters long.\n     */\n    metadata?: unknown | null;\n  }\n}\n\nexport interface ThreadUpdateParams {\n  /**\n   * Set of 16 key-value pairs that can be attached to an object. This can be useful\n   * for storing additional information about the object in a structured format. Keys\n   * can be a maximum of 64 characters long and values can be a maxium of 512\n   * characters long.\n   */\n  metadata?: unknown | null;\n}\n\nexport interface ThreadCreateAndRunParams {\n  /**\n   * The ID of the\n   * [assistant](https://platform.openai.com/docs/api-reference/assistants) to use to\n   * execute this run.\n   */\n  assistant_id: string;\n\n  /**\n   * Override the default system message of the assistant. This is useful for\n   * modifying the behavior on a per-run basis.\n   */\n  instructions?: string | null;\n\n  /**\n   * Set of 16 key-value pairs that can be attached to an object. This can be useful\n   * for storing additional information about the object in a structured format. Keys\n   * can be a maximum of 64 characters long and values can be a maxium of 512\n   * characters long.\n   */\n  metadata?: unknown | null;\n\n  /**\n   * The ID of the [Model](https://platform.openai.com/docs/api-reference/models) to\n   * be used to execute this run. If a value is provided here, it will override the\n   * model associated with the assistant. If not, the model associated with the\n   * assistant will be used.\n   */\n  model?: string | null;\n\n  /**\n   * If no thread is provided, an empty thread will be created.\n   */\n  thread?: ThreadCreateAndRunParams.Thread;\n\n  /**\n   * Override the tools the assistant can use for this run. This is useful for\n   * modifying the behavior on a per-run basis.\n   */\n  tools?: Array<\n    | ThreadCreateAndRunParams.AssistantToolsCode\n    | ThreadCreateAndRunParams.AssistantToolsRetrieval\n    | ThreadCreateAndRunParams.AssistantToolsFunction\n  > | null;\n}\n\nexport namespace ThreadCreateAndRunParams {\n  /**\n   * If no thread is provided, an empty thread will be created.\n   */\n  export interface Thread {\n    /**\n     * A list of [messages](https://platform.openai.com/docs/api-reference/messages) to\n     * start the thread with.\n     */\n    messages?: Array<Thread.Message>;\n\n    /**\n     * Set of 16 key-value pairs that can be attached to an object. This can be useful\n     * for storing additional information about the object in a structured format. Keys\n     * can be a maximum of 64 characters long and values can be a maxium of 512\n     * characters long.\n     */\n    metadata?: unknown | null;\n  }\n\n  export namespace Thread {\n    export interface Message {\n      /**\n       * The content of the message.\n       */\n      content: string;\n\n      /**\n       * The role of the entity that is creating the message. Currently only `user` is\n       * supported.\n       */\n      role: 'user';\n\n      /**\n       * A list of [File](https://platform.openai.com/docs/api-reference/files) IDs that\n       * the message should use. There can be a maximum of 10 files attached to a\n       * message. Useful for tools like `retrieval` and `code_interpreter` that can\n       * access and use files.\n       */\n      file_ids?: Array<string>;\n\n      /**\n       * Set of 16 key-value pairs that can be attached to an object. This can be useful\n       * for storing additional information about the object in a structured format. Keys\n       * can be a maximum of 64 characters long and values can be a maxium of 512\n       * characters long.\n       */\n      metadata?: unknown | null;\n    }\n  }\n\n  export interface AssistantToolsCode {\n    /**\n     * The type of tool being defined: `code_interpreter`\n     */\n    type: 'code_interpreter';\n  }\n\n  export interface AssistantToolsRetrieval {\n    /**\n     * The type of tool being defined: `retrieval`\n     */\n    type: 'retrieval';\n  }\n\n  export interface AssistantToolsFunction {\n    function: Shared.FunctionDefinition;\n\n    /**\n     * The type of tool being defined: `function`\n     */\n    type: 'function';\n  }\n}\n\nexport namespace Threads {\n  export import Thread = ThreadsAPI.Thread;\n  export import ThreadDeleted = ThreadsAPI.ThreadDeleted;\n  export import ThreadCreateParams = ThreadsAPI.ThreadCreateParams;\n  export import ThreadUpdateParams = ThreadsAPI.ThreadUpdateParams;\n  export import ThreadCreateAndRunParams = ThreadsAPI.ThreadCreateAndRunParams;\n  export import Runs = RunsAPI.Runs;\n  export import RequiredActionFunctionToolCall = RunsAPI.RequiredActionFunctionToolCall;\n  export import Run = RunsAPI.Run;\n  export import RunsPage = RunsAPI.RunsPage;\n  export import RunCreateParams = RunsAPI.RunCreateParams;\n  export import RunUpdateParams = RunsAPI.RunUpdateParams;\n  export import RunListParams = RunsAPI.RunListParams;\n  export import RunSubmitToolOutputsParams = RunsAPI.RunSubmitToolOutputsParams;\n  export import Messages = MessagesAPI.Messages;\n  export import MessageContentImageFile = MessagesAPI.MessageContentImageFile;\n  export import MessageContentText = MessagesAPI.MessageContentText;\n  export import ThreadMessage = MessagesAPI.ThreadMessage;\n  export import ThreadMessageDeleted = MessagesAPI.ThreadMessageDeleted;\n  export import ThreadMessagesPage = MessagesAPI.ThreadMessagesPage;\n  export import MessageCreateParams = MessagesAPI.MessageCreateParams;\n  export import MessageUpdateParams = MessagesAPI.MessageUpdateParams;\n  export import MessageListParams = MessagesAPI.MessageListParams;\n}\n"],"mappings":"AAAA;SAGSA,WAAW,QAAQ,iBAAiB;SACpCC,gBAAgB,QAAQ,aAAa;OAGvC,KAAKC,WAAW,MAAM,iDAAiD;OACvE,KAAKC,OAAO,MAAM,yCAAyC;AAElE,OAAM,MAAOC,OAAQ,SAAQJ,WAAW;EAAxCK,YAAA;;IACE,KAAAC,IAAI,GAAiB,IAAIH,OAAO,CAACI,IAAI,CAAC,IAAI,CAACC,OAAO,CAAC;IACnD,KAAAC,QAAQ,GAAyB,IAAIP,WAAW,CAACQ,QAAQ,CAAC,IAAI,CAACF,OAAO,CAAC;EA8DzE;EAvDEG,MAAMA,CAAA,EAEyB;IAAA,IAD7BC,IAAA,GAAAC,SAAA,CAAAC,MAAA,QAAAD,SAAA,QAAAE,SAAA,GAAAF,SAAA,MAAiD,EAAE;IAAA,IACnDG,OAA6B,GAAAH,SAAA,CAAAC,MAAA,OAAAD,SAAA,MAAAE,SAAA;IAE7B,IAAId,gBAAgB,CAACW,IAAI,CAAC,EAAE;MAC1B,OAAO,IAAI,CAACD,MAAM,CAAC,EAAE,EAAEC,IAAI,CAAC;;IAE9B,OAAO,IAAI,CAACJ,OAAO,CAACS,IAAI,CAAC,UAAU,EAAE;MACnCL,IAAI;MACJ,GAAGI,OAAO;MACVE,OAAO,EAAE;QAAE,aAAa,EAAE,eAAe;QAAE,IAAGF,OAAO,aAAPA,OAAO,uBAAPA,OAAO,CAAEE,OAAO;MAAA;KAC/D,CAAC;EACJ;EAEA;;;EAGAC,QAAQA,CAACC,QAAgB,EAAEJ,OAA6B;IACtD,OAAO,IAAI,CAACR,OAAO,CAACa,GAAG,aAAAC,MAAA,CAAaF,QAAQ,GAAI;MAC9C,GAAGJ,OAAO;MACVE,OAAO,EAAE;QAAE,aAAa,EAAE,eAAe;QAAE,IAAGF,OAAO,aAAPA,OAAO,uBAAPA,OAAO,CAAEE,OAAO;MAAA;KAC/D,CAAC;EACJ;EAEA;;;EAGAK,MAAMA,CAACH,QAAgB,EAAER,IAAwB,EAAEI,OAA6B;IAC9E,OAAO,IAAI,CAACR,OAAO,CAACS,IAAI,aAAAK,MAAA,CAAaF,QAAQ,GAAI;MAC/CR,IAAI;MACJ,GAAGI,OAAO;MACVE,OAAO,EAAE;QAAE,aAAa,EAAE,eAAe;QAAE,IAAGF,OAAO,aAAPA,OAAO,uBAAPA,OAAO,CAAEE,OAAO;MAAA;KAC/D,CAAC;EACJ;EAEA;;;EAGAM,GAAGA,CAACJ,QAAgB,EAAEJ,OAA6B;IACjD,OAAO,IAAI,CAACR,OAAO,CAACiB,MAAM,aAAAH,MAAA,CAAaF,QAAQ,GAAI;MACjD,GAAGJ,OAAO;MACVE,OAAO,EAAE;QAAE,aAAa,EAAE,eAAe;QAAE,IAAGF,OAAO,aAAPA,OAAO,uBAAPA,OAAO,CAAEE,OAAO;MAAA;KAC/D,CAAC;EACJ;EAEA;;;EAGAQ,YAAYA,CAACd,IAA8B,EAAEI,OAA6B;IACxE,OAAO,IAAI,CAACR,OAAO,CAACS,IAAI,CAAC,eAAe,EAAE;MACxCL,IAAI;MACJ,GAAGI,OAAO;MACVE,OAAO,EAAE;QAAE,aAAa,EAAE,eAAe;QAAE,IAAGF,OAAO,aAAPA,OAAO,uBAAPA,OAAO,CAAEE,OAAO;MAAA;KAC/D,CAAC;EACJ;;AA0NF,WAAiBd,OAAO;EAMRA,OAAA,CAAAG,IAAI,GAAGJ,OAAO,CAACI,IAAI;EAGnBH,OAAA,CAAAuB,QAAQ,GAAGxB,OAAO,CAACwB,QAAQ;EAK3BvB,OAAA,CAAAM,QAAQ,GAAGR,WAAW,CAACQ,QAAQ;EAK/BN,OAAA,CAAAwB,kBAAkB,GAAG1B,WAAW,CAAC0B,kBAAkB;AAInE,CAAC,EAvBgBxB,OAAO,KAAPA,OAAO"},"metadata":{},"sourceType":"module","externalDependencies":[]}